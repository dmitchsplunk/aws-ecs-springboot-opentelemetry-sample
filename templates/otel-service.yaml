---
AWSTemplateFormatVersion: 2010-09-09

Mappings:
  Otel:
    Ports:
      grpc: '4317'
      http: '4318'
      xray: '2000'
      stastd: '8125'

Parameters:

  AppName:
    Type: String

  SplunkRealm:
    Type: String

  SplunkAccessToken:
    Type: String

  CollectorMemoryLimit:
    Type: Number

  EnvironmentName:
    Type: String

  VpcCIDR:
    Type: String

  VpcId:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  Cluster:
    Type: String

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  PrivateNamespaceId:
    Type: String

  PrometheusEndpoint:
    Type: String

  SplunkOtelDomain:
    Type: String

Resources:

  AotConfigParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /aot/config
      Type: String
      Tier: "Advanced"
      Value: !Sub |
        extensions:
          health_check:
          pprof:
            endpoint: 0.0.0.0:1777
          zpages:
            endpoint: 0.0.0.0:55679

        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:4318
          awsxray:
            endpoint: 0.0.0.0:2000
            transport: udp
          statsd:
            endpoint: 0.0.0.0:8125
            aggregation_interval: 60s
          awsecscontainermetrics:
            collection_interval: 60s
          prometheus/internal:
            config:
              scrape_configs:
                - job_name: 'otel-collector'
                  scrape_interval: 10s
                  static_configs:
                    - targets: ['0.0.0.0:8888']
                  metric_relabel_configs:
                    - source_labels: [ __name__ ]
                      regex: 'promhttp_metric_handler_errors.*'
                      action: drop
                    - source_labels: [ __name__ ]
                      regex: 'otelcol_processor_batch_.*'
                      action: drop

        processors:
          batch:
          # Enabling the memory_limiter is strongly recommended for every pipeline.
          # Configuration is based on the amount of memory allocated to the collector.
          # For more information about memory limiter, see
          # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiter/README.md
          memory_limiter:
            check_interval: 2s
            limit_mib: ${CollectorMemoryLimit}
          resourcedetection:
            detectors: [ecs]
            override: false
          filter:
            metrics:
              include:
                match_type: strict
                metric_names:
                  - ecs.task.memory.utilized
                  - ecs.task.memory.reserved
                  - ecs.task.cpu.utilized
                  - ecs.task.cpu.reserved
                  - ecs.task.network.rate.rx
                  - ecs.task.network.rate.tx
                  - ecs.task.storage.read_bytes
                  - ecs.task.storage.write_bytes

        exporters:
          debug:
            verbosity: detailed
          otlp:
            endpoint: ${SplunkOtelDomain}:4317
            tls:
              insecure: true
        
        service:
          extensions: [ health_check, zpages, pprof ]
          pipelines:
            traces:
              receivers: [ otlp ]
              processors: [ memory_limiter, batch, resourcedetection ]
              exporters: [ otlp ]
            metrics:
              receivers: [ otlp, awsecscontainermetrics, prometheus/internal ]
              processors: [ memory_limiter, batch, resourcedetection ]
              exporters: [ otlp ]
            logs:
              receivers: [ otlp ]
              processors: [ memory_limiter, batch, resourcedetection ]
              exporters: [ otlp ]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: TCP
          FromPort: !FindInMap [ Otel, Ports, http]
          ToPort: !FindInMap [ Otel, Ports, http]
        - CidrIp: !Ref VpcCIDR
          IpProtocol: TCP
          FromPort: !FindInMap [ Otel, Ports, xray]
          ToPort: !FindInMap [ Otel, Ports, xray]
        - CidrIp: !Ref VpcCIDR
          IpProtocol: TCP
          FromPort: !FindInMap [ Otel, Ports, stastd]
          ToPort: !FindInMap [ Otel, Ports, stastd]
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-${AWS::StackName}

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${AppName}-task-policy-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
          - PolicyName: !Sub ${AppName}-task-policy-${AWS::StackName}
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogStreams
                    - logs:DescribeLogGroups
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                    - xray:GetSamplingRules
                    - xray:GetSamplingTargets
                    - xray:GetSamplingStatisticSummaries
                    - ssm:GetParameters
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - aps:RemoteWrite
                  Resource: "*"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}
      RetentionInDays: 14

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AppName}-service-${AWS::StackName}
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref Subnets
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          ContainerName: !Ref AppName

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Otel Application
      DnsConfig:
        NamespaceId: !Ref PrivateNamespaceId
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig:
        FailureThreshold: 3
      Name: !Ref AppName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-taskdef-${AWS::StackName}
      RequiresCompatibilities:
        - FARGATE
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: public.ecr.aws/aws-observability/aws-otel-collector:v0.43.3
          Essential: true
          Memory: 512
          PortMappings:
            - ContainerPort: !FindInMap [ Otel, Ports, http]
            - ContainerPort: !FindInMap [ Otel, Ports, xray]
            - ContainerPort: !FindInMap [ Otel, Ports, stastd]
          Secrets:
            - Name: AOT_CONFIG_CONTENT
              ValueFrom: !Ref AotConfigParameter
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs


Outputs:
  Service:
    Value: !Ref FargateService
